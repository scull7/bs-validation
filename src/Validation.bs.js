// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function Make_validation(F) {
  var map = function (transform, t) {
    if (t.tag) {
      return /* Success */Block.__(1, [Curry._1(transform, t[0])]);
    } else {
      return /* Failure */Block.__(0, [t[0]]);
    }
  };
  var apply = function (aValidation, t) {
    if (t.tag) {
      if (aValidation.tag) {
        return map(t[0], aValidation);
      } else {
        return /* Failure */Block.__(0, [aValidation[0]]);
      }
    } else {
      var x = t[0];
      if (aValidation.tag) {
        return /* Failure */Block.__(0, [x]);
      } else {
        return /* Failure */Block.__(0, [Curry._2(F[/* concat */0], x, aValidation[0])]);
      }
    }
  };
  var unsafeGet = function (param) {
    if (param.tag) {
      return param[0];
    } else {
      return Pervasives.failwith("Can't extract the value of a Failure");
    }
  };
  var getOrElse = function (defaultValue, t) {
    if (t.tag) {
      return t[0];
    } else {
      return defaultValue;
    }
  };
  var orElse = function (handler, t) {
    if (t.tag) {
      return /* Success */Block.__(1, [t[0]]);
    } else {
      return Curry._1(handler, t[0]);
    }
  };
  var concat = function (aValidation, t) {
    if (t.tag) {
      return aValidation;
    } else {
      var x = t[0];
      if (aValidation.tag) {
        return /* Failure */Block.__(0, [x]);
      } else {
        return /* Failure */Block.__(0, [Curry._2(F[/* concat */0], x, aValidation[0])]);
      }
    }
  };
  var fold = function (failure, success, t) {
    if (t.tag) {
      return Curry._1(success, t[0]);
    } else {
      return Curry._1(failure, t[0]);
    }
  };
  var swap = function (param) {
    if (param.tag) {
      return /* Failure */Block.__(0, [param[0]]);
    } else {
      return /* Success */Block.__(1, [param[0]]);
    }
  };
  var bimap = function (failure, success, t) {
    if (t.tag) {
      return /* Success */Block.__(1, [Curry._1(success, t[0])]);
    } else {
      return /* Failure */Block.__(0, [Curry._1(failure, t[0])]);
    }
  };
  var mapFailure = function (transform, t) {
    if (t.tag) {
      return /* Success */Block.__(1, [t[0]]);
    } else {
      return /* Failure */Block.__(0, [Curry._1(transform, t[0])]);
    }
  };
  var make = function (x) {
    return /* Success */Block.__(1, [x]);
  };
  var toOption = function (param) {
    if (param.tag) {
      return Js_primitive.some(param[0]);
    }
    
  };
  return /* module */[
          /* map */map,
          /* apply */apply,
          /* unsafeGet */unsafeGet,
          /* getOrElse */getOrElse,
          /* orElse */orElse,
          /* concat */concat,
          /* fold */fold,
          /* swap */swap,
          /* bimap */bimap,
          /* mapFailure */mapFailure,
          /* make */make,
          /* toOption */toOption
        ];
}

exports.Make_validation = Make_validation;
/* No side effect */
