// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Validation = require("../src/Validation.bs.js");

var concat = Belt_Array.concat;

var FoldableArray = /* module */[/* concat */concat];

var V = Validation.Make_validation(FoldableArray);

var lengthError = "Password must have more than 6 characters.";

var strengthError = "Password must contain a special character.";

function isPasswordLongEnough(password) {
  var match = password.length > 6;
  if (match) {
    return /* Success */Block.__(1, [password]);
  } else {
    return /* Failure */Block.__(0, [/* array */[lengthError]]);
  }
}

function isPasswordStrongEnough(password) {
  var regex = (/[\W]/);
  var match = regex.test(password);
  if (match) {
    return /* Success */Block.__(1, [password]);
  } else {
    return /* Failure */Block.__(0, [/* array */[strengthError]]);
  }
}

function isPasswordValid(password) {
  return Curry._2(V[/* map */0], (function () {
                return password;
              }), Curry._2(V[/* concat */5], isPasswordStrongEnough(password), Curry._2(V[/* concat */5], isPasswordLongEnough(password), /* Success */Block.__(1, [/* () */0]))));
}

describe("Folketale password validation example", (function () {
        Jest.test("should return the password", (function () {
                var password = "rosesarered$andstuff";
                var match = isPasswordValid(password);
                if (match.tag) {
                  return Jest.Expect[/* toBe */2](password, Jest.Expect[/* expect */0](match[0]));
                } else {
                  console.log(match[0]);
                  return Jest.fail("unexpected_failure");
                }
              }));
        Jest.test("should return a single item failure", (function () {
                var match = isPasswordValid("rosesarered");
                if (match.tag) {
                  return Jest.fail("unexpected_success");
                } else {
                  return Jest.Expect[/* toBeSupersetOf */9](/* array */[strengthError], Jest.Expect[/* expect */0](match[0]));
                }
              }));
        return Jest.test("should return 2 items in the failure list", (function () {
                      var match = isPasswordValid("foo");
                      if (match.tag) {
                        return Jest.fail("unexpected_success");
                      } else {
                        return Jest.Expect[/* toBeSupersetOf */9](/* array */[
                                    lengthError,
                                    strengthError
                                  ], Jest.Expect[/* expect */0](match[0]));
                      }
                    }));
      }));

exports.FoldableArray = FoldableArray;
exports.V = V;
exports.lengthError = lengthError;
exports.strengthError = strengthError;
exports.isPasswordLongEnough = isPasswordLongEnough;
exports.isPasswordStrongEnough = isPasswordStrongEnough;
exports.isPasswordValid = isPasswordValid;
/* V Not a pure module */
